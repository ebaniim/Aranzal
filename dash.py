import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import time
from datetime import datetime, timedelta
import base64

# Page config
st.set_page_config(
    page_title="üèá –ù–∞–∞–¥–∞–º 2025 –£—Ä–∞–ª–¥–∞–∞–Ω—ã –°–∞–º–±–∞—Ä",
    page_icon="üèá",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for styling
def load_css():
    st.markdown("""
    <style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        background: linear-gradient(90deg, #FF6B35, #F7931E);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 2rem;
    }
    
    .sub-header {
        font-size: 1.5rem;
        font-weight: bold;
        color: #2E86C1;
        margin-bottom: 1rem;
    }
    
    .metric-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
    
    .stTabs [data-baseweb="tab-list"] {
        gap: 2rem;
    }
    
    .stTabs [data-baseweb="tab"] {
        padding: 1rem 2rem;
        background-color: #f0f2f6;
        border-radius: 10px;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }
    
    .race-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin: 1rem 0;
    }
    </style>
    """, unsafe_allow_html=True)

# Data loading and generation functions
@st.cache_data
def generate_demo_data():
    """CSV —Ñ–∞–π–ª—É—É–¥ –±–∞–π—Ö–≥“Ø–π “Ø–µ–¥ “Ø–∑“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω ”©–≥”©–≥–¥”©–ª “Ø“Ø—Å–≥—ç—Ö"""
    
    # –ú–æ—Ä–∏–Ω—ã ”©–≥”©–≥–¥”©–ª “Ø“Ø—Å–≥—ç—Ö
    np.random.seed(42)
    aimags = ['–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä', '–î–∞—Ä—Ö–∞–Ω-–£—É–ª', '–û—Ä—Ö–æ–Ω', '–°—ç–ª—ç–Ω–≥—ç', '–¢”©–≤', '–ê—Ä—Ö–∞–Ω–≥–∞–π']
    sums = ['–¢”©–≤', '–•–æ–π–¥', '–£—Ä–¥', '–ó“Ø“Ø–Ω', '–ë–∞—Ä—É—É–Ω']
    colors = ['–•—ç—ç—Ä', '–®–∞—Ä', '–•–∞—Ä', '–°–∞–∞—Ä–∞–ª', '–ë–æ—Ä', '–ê–ª–∞–≥']
    
    horses_data = []
    for i in range(300):
        age_group = (i // 50) + 2  # 2-7 –Ω–∞—Å
        horses_data.append({
            'horse_id': f'–ú{str(i+1).zfill(3)}',
            'color': np.random.choice(colors),
            'age': age_group,
            'trainer': f'–°—É—Ä–≥–∞–≥—á_{np.random.randint(1, 51)}',
            'trainer_id': f'–°{str(np.random.randint(1, 51)).zfill(3)}',
            'aimag': np.random.choice(aimags),
            'sum': np.random.choice(sums),
            'rider_name': f'–£–Ω–∞–∞—á_{i+1}',
            'rider_age': np.random.randint(8, 16),
            'aimgiin_airag': np.random.randint(0, 5),
            'ulsiin_airag': np.random.randint(0, 10),
            'aimgiin_turuu': np.random.randint(0, 3),
            'ulsiin_turuu': np.random.randint(0, 8),
            'racing_group': f'–ù–∞—Å_{age_group}',
            'total_achievement': np.random.randint(0, 20)
        })
    
    horses_df = pd.DataFrame(horses_data)
    
    # –°—É—Ä–≥–∞–≥—á–∏–π–Ω ”©–≥”©–≥–¥”©–ª “Ø“Ø—Å–≥—ç—Ö
    trainers_data = []
    for i in range(50):
        trainers_data.append({
            'trainer_id': f'–°{str(i+1).zfill(3)}',
            'trainer_name': f'–°—É—Ä–≥–∞–≥—á_{i+1}',
            'aimag': np.random.choice(aimags),
            'sum': np.random.choice(sums),
            'national_achievement': np.random.randint(0, 15),
            'provincial__achievement': np.random.randint(0, 25),
            'total_trained_horses': np.random.randint(1, 10),
            'phone_number': f'+976-{np.random.randint(80000000, 99999999)}'
        })
    
    trainers_df = pd.DataFrame(trainers_data)
    
    # –£—Ä–∞–ª–¥–∞–∞–Ω—ã –±–∏—á–ª—ç–≥–∏–π–Ω ”©–≥”©–≥–¥”©–ª (–î–∞–∞–≥–∞ - 2 –Ω–∞—Å—Ç–∞–π)
    daaga_horses = horses_df[horses_df['age'] == 2].head(50)
    record_data = []
    
    for i, horse in enumerate(daaga_horses.itertuples()):
        finish_time_minutes = np.random.randint(25, 35)
        finish_time_seconds = np.random.randint(0, 60)
        distance_km = 15.0
        
        record_data.append({
            'horse_id': horse.horse_id,
            'racing_group': '–î–∞–∞–≥–∞',
            'final_position': i + 1,
            'finish_time_minutes': finish_time_minutes,
            'finish_time_seconds': finish_time_seconds,
            'average_speed_kmh': distance_km / ((finish_time_minutes + finish_time_seconds/60) / 60),
            'max_speed_kmh': np.random.uniform(35, 55),
            'stride_length_m': np.random.uniform(4.5, 6.5),
            'heart_rate_start': np.random.randint(60, 80),
            'heart_rate_end': np.random.randint(120, 180),
            'weight_kg': np.random.uniform(280, 350),
            'rider_weight_kg': np.random.uniform(25, 40),
            'race_name': '–ù–∞–∞–¥–∞–º 2025 - –¥–∞–∞–≥–∞',
            'date': '2025-07-11',
            'distance_km': distance_km,
            'weather': np.random.choice(['–ù–∞—Ä—Ç–∞–π', '“Æ“Ø–ª—ç—Ä—Ö—ç–≥', '–°–∞–ª—Ö–∏—Ç–∞–π']),
            'temperature_celsius': np.random.randint(20, 30),
            'wind_speed_kmh': np.random.randint(0, 20),
            'humidity_percent': np.random.randint(30, 70),
            'track_condition': np.random.choice(['–°–∞–π–Ω', '–ó”©”©–ª”©–Ω', '–•–∞—Ç—É—É']),
            'prize_money_tugrik': max(0, 10000000 - (i * 200000)),
            'injury': np.random.choice(['–ë–∞–π—Ö–≥“Ø–π', '–ë–∞–≥–∞ –∑—ç—Ä—ç–≥', '–ë–∞–π—Ö–≥“Ø–π', '–ë–∞–π—Ö–≥“Ø–π', '–ë–∞–π—Ö–≥“Ø–π']),
            'fatigue_level': np.random.choice(['–ë–∞–≥–∞', '–î—É–Ω–¥', '”®–Ω–¥”©—Ä']),
            'rider_experience_years': np.random.randint(1, 8)
        })
    
    record_df = pd.DataFrame(record_data)
    
    # –®–∏–ª–¥—ç–≥ 5 –º–æ—Ä—å–¥—ã–Ω —à—É—É–¥ ”©–≥”©–≥–¥”©–ª “Ø“Ø—Å–≥—ç—Ö
    top_5_horses = record_df.head(5)['horse_id'].tolist()
    live_data = []
    
    # –ú–æ–Ω–≥–æ–ª—ã–Ω —Ç–∞–ª –Ω—É—Ç–≥–∏–π–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    base_lat, base_lon = 47.9184, 106.9177
    
    for timestamp in range(0, 1800, 60):  # 30 –º–∏–Ω—É—Ç, 60 —Å–µ–∫—É–Ω–¥ —Ç—É—Ç–∞–º–¥
        for i, horse_id in enumerate(top_5_horses):
            progress = timestamp / 1800  # –£—Ä–∞–ª–¥–∞–∞–Ω—ã —è–≤—Ü (0-—Å 1 —Ö“Ø—Ä—Ç—ç–ª)
            
            live_data.append({
                'id': len(live_data),
                'timestamp_seconds': timestamp,
                'horse_id': horse_id,
                'distance_covered_km': progress * 15 + np.random.uniform(-0.5, 0.5),
                'current_speed_kmh': 30 + np.random.uniform(-10, 15) + (5 * np.sin(progress * np.pi)),
                'heart_rate': 80 + int(progress * 60) + np.random.randint(-10, 10),
                'position': i + 1 + np.random.randint(-1, 2) if timestamp > 300 else i + 1,
                'gap_to_leader_seconds': i * 5 + np.random.randint(0, 10) if i > 0 else 0,
                'cumulative_time_seconds': timestamp + (i * 2),
                'latitude': base_lat + (progress * 0.1) + np.random.uniform(-0.01, 0.01),
                'longitude': base_lon + (progress * 0.15) + np.random.uniform(-0.01, 0.01),
                'elevation_m': 1350 + np.random.randint(-50, 100),
                'stride_frequency': 2.2 + np.random.uniform(-0.3, 0.3),
                'energy_level': max(20, 100 - int(progress * 60) + np.random.randint(-10, 10)),
                'rider_commands': np.random.choice(['–¢–æ–≥—Ç–≤–æ—Ä—Ç–æ–π', '–¢“Ø–ª—Ö—ç—Ö', '–ë–∞—Ä–∏—Ö', '–ì“Ø–π–ª—Ç', '–ê–º—Ä–∞—Ö'])
            })
    
    live_df = pd.DataFrame(live_data)
    
    return horses_df, trainers_df, record_df, live_df

@st.cache_data
def load_data():
    """CSV —Ñ–∞–π–ª–∞–∞—Å ”©–≥”©–≥–¥”©–ª –∞—á–∞–∞–ª–∞—Ö —ç—Å–≤—ç–ª “Ø–∑“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω ”©–≥”©–≥–¥”©–ª “Ø“Ø—Å–≥—ç—Ö"""
    try:
        horses_df = pd.read_csv(r"data/horse.csv")
        trainers_df = pd.read_csv(r"data/trainer.csv")
        record_df = pd.read_csv(r"data/record.csv")
        live_df = pd.read_csv(r"data/live.csv")
        return horses_df, trainers_df, record_df, live_df
    except FileNotFoundError:
        st.info("üìÅ CSV —Ñ–∞–π–ª—É—É–¥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π. “Æ–∑“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω ”©–≥”©–≥–¥–ª–∏–π–≥ –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞.")
        return generate_demo_data()

# Dashboard functions
def overview_dashboard(horses_df, trainers_df, record_df):
    """–ï—Ä”©–Ω—Ö–∏–π —Å–∞–º–±–∞—Ä - –≥–æ–ª “Ø–∑“Ø“Ø–ª—ç–ª—Ç –±–æ–ª–æ–Ω —Ç–∞—Ä—Ö–∞–ª—Ç"""
    
    st.markdown('<h2 class="sub-header">üèá –£—Ä–∞–ª–¥–∞–∞–Ω—ã –ï—Ä”©–Ω—Ö–∏–π –ú—ç–¥—ç—ç–ª—ç–ª</h2>', unsafe_allow_html=True)
    
    # –ì–æ–ª “Ø–∑“Ø“Ø–ª—ç–ª—Ç“Ø“Ø–¥
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ù–∏–π—Ç –ú–æ—Ä—å", len(horses_df), delta="–ò–¥—ç–≤—Ö—Ç—ç–π")
    with col2:
        st.metric("–ù–∏–π—Ç –£—è–∞—á", len(trainers_df), delta="–ë“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π")
    with col3:
        st.metric("–î—É—É—Å—Å–∞–Ω –£—Ä–∞–ª–¥–∞–∞–Ω", 1, delta="–ù–∞–∞–¥–∞–º 2025")
    with col4:
        total_prize = record_df['prize_money_tugrik'].sum()
        st.metric("–ù–∏–π—Ç –®–∞–≥–Ω–∞–ª—ã–Ω –ú”©–Ω–≥”©", f"‚ÇÆ{total_prize:,.0f}", delta="–•—É–≤–∞–∞—Ä–∏–ª—Å–∞–Ω")
    
    # –î–∏–∞–≥—Ä–∞–º—É—É–¥ 1-—Ä —ç–≥–Ω—ç—ç
    col1, col2 = st.columns(2)
    
    with col1:
        # –ù–∞—Å–Ω—ã –∞–Ω–≥–∏–ª–ª–∞–∞—Ä –º–æ—Ä—å–¥
        age_dist = horses_df['age'].value_counts().sort_index()
        fig_age = px.bar(
            x=age_dist.index,
            y=age_dist.values,
            title="üêé –ù–∞—Å–Ω—ã –ê–Ω–≥–∏–ª–ª–∞–∞—Ä –ú–æ—Ä—å–¥",
            labels={'x': '–ù–∞—Å (–ñ–∏–ª)', 'y': '–ú–æ—Ä–∏–Ω—ã –¢–æ–æ'},
            color=age_dist.values,
            color_continuous_scale='viridis'
        )
        fig_age.update_layout(showlegend=False)
        st.plotly_chart(fig_age, use_container_width=True)
    
    with col2:
        # –ê–π–º–≥–∞–∞—Ä –º–æ—Ä—å–¥—ã–Ω —Ç–∞—Ä—Ö–∞–ª—Ç
        aimag_dist = horses_df['aimag'].value_counts()
        fig_aimag = px.pie(
            values=aimag_dist.values,
            names=aimag_dist.index,
            title="üó∫Ô∏è –ê–π–º–≥–∞–∞—Ä –ú–æ—Ä–∏–Ω—ã –¢–∞—Ä—Ö–∞–ª—Ç"
        )
        fig_aimag.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig_aimag, use_container_width=True)
    
    # –î–∏–∞–≥—Ä–∞–º—É—É–¥ 2-—Ä —ç–≥–Ω—ç—ç
    col1, col2 = st.columns(2)
    
    with col1:
        # –°—É—Ä–≥–∞–≥—á–∏–π–Ω –∞–º–∂–∏–ª—Ç
        fig_trainers = px.scatter(
            trainers_df,
            x='provincial__achievement',
            y='national_achievement',
            size='total_trained_horses',
            color='aimag',
            title="üèÜ –£—è–∞—á–∏–π–Ω –ê–º–∂–∏–ª—Ç",
            labels={'provincial__achievement': '–ê–π–º–≥–∏–π–Ω –ê–º–∂–∏–ª—Ç', 
                   'national_achievement': '“Æ–Ω–¥—ç—Å–Ω–∏–π –ê–º–∂–∏–ª—Ç'},
            hover_data=['trainer_name']
        )
        st.plotly_chart(fig_trainers, use_container_width=True)
    
    with col2:
        # –ú–æ—Ä–∏–Ω—ã ”©–Ω–≥”©–Ω–∏–π —Ç–∞—Ä—Ö–∞–ª—Ç
        color_dist = horses_df['color'].value_counts()
        fig_colors = px.bar(
            x=color_dist.values,
            y=color_dist.index,
            orientation='h',
            title="üé® –ú–æ—Ä–∏–Ω—ã ”®–Ω–≥”©–Ω–∏–π –¢–∞—Ä—Ö–∞–ª—Ç",
            labels={'x': '–ú–æ—Ä–∏–Ω—ã –¢–æ–æ', 'y': '”®–Ω–≥”©'},
            color=color_dist.values,
            color_continuous_scale='rainbow'
        )
        st.plotly_chart(fig_colors, use_container_width=True)

def race_record_dashboard(record_df, horses_df):
    """–£—Ä–∞–ª–¥–∞–∞–Ω—ã –±–∏—á–ª—ç–≥–∏–π–Ω —Å–∞–º–±–∞—Ä - –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —à–∏–Ω–∂–∏–ª–≥—ç—ç"""
    
    st.markdown('<h2 class="sub-header">üèÅ –£—Ä–∞–ª–¥–∞–∞–Ω—ã –ë–∏—á–ª—ç–≥–∏–π–Ω –®–∏–Ω–∂–∏–ª–≥—ç—ç - –ù–∞–∞–¥–∞–º 2025 –î–∞–∞–≥–∞</h2>', unsafe_allow_html=True)
    
    # –£—Ä–∞–ª–¥–∞–∞–Ω—ã —Ö—É—Ä–∞–∞–Ω–≥—É–π
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–û—Ä–æ–ª—Ü–æ–≥—á–∏–¥", len(record_df))
    with col2:
        avg_speed = record_df['average_speed_kmh'].mean()
        st.metric("–î—É–Ω–¥–∞–∂ –•—É—Ä–¥", f"{avg_speed:.1f} –∫–º/—Ü")
    with col3:
        max_speed = record_df['max_speed_kmh'].max()
        st.metric("–•–∞–º–≥–∏–π–Ω ”®–Ω–¥”©—Ä –•—É—Ä–¥", f"{max_speed:.1f} –∫–º/—Ü")
    with col4:
        race_distance = record_df['distance_km'].iloc[0]
        st.metric("–ó–∞–π", f"{race_distance:.0f} –∫–º")
    
    # –ë–∞–π—Ä–ª–∞–ª –±–æ–ª–æ–Ω —Ö—É—Ä–¥–Ω—ã —à–∏–Ω–∂–∏–ª–≥—ç—ç
    col1, col2 = st.columns(2)
    
    with col1:
        # –≠—Ü—Å–∏–π–Ω –±–∞–π—Ä–ª–∞–ª –±–∞ —Ö—É—Ä–¥
        fig_pos = px.scatter(
            record_df,
            x='final_position',
            y='average_speed_kmh',
            size='max_speed_kmh',
            color='final_position',
            title="üèÉ –ë–∞–π—Ä–ª–∞–ª –±–∞ –•—É—Ä–¥–Ω—ã –®–∏–Ω–∂–∏–ª–≥—ç—ç",
            labels={'final_position': '–≠—Ü—Å–∏–π–Ω –ë–∞–π—Ä–ª–∞–ª', 'average_speed_kmh': '–î—É–Ω–¥–∞–∂ –•—É—Ä–¥ (–∫–º/—Ü)'},
            hover_data=['horse_id', 'finish_time_minutes', 'finish_time_seconds'],
            color_continuous_scale='RdYlBu_r'
        )
        st.plotly_chart(fig_pos, use_container_width=True)
    
    with col2:
        # –ë–∞—Ä–∏–∞–Ω—ã —Ü–∞–≥–∏–π–Ω —Ç–∞—Ä—Ö–∞–ª—Ç
        record_df['total_time'] = record_df['finish_time_minutes'] + record_df['finish_time_seconds']/60
        fig_time = px.histogram(
            record_df,
            x='total_time',
            nbins=20,
            title="‚è±Ô∏è –ë–∞—Ä–∏–∞–Ω—ã –¶–∞–≥–∏–π–Ω –¢–∞—Ä—Ö–∞–ª—Ç",
            labels={'total_time': '–ë–∞—Ä–∏–∞–Ω—ã –¶–∞–≥ (–º–∏–Ω—É—Ç)', 'count': '–ú–æ—Ä–∏–Ω—ã –¢–æ–æ'},
            color_discrete_sequence=['#FF6B35']
        )
        st.plotly_chart(fig_time, use_container_width=True)
    
    # –ó“Ø—Ä—Ö–Ω–∏–π —Ü–æ—Ö–∏–ª—Ç –±–æ–ª–æ–Ω —É–Ω–∞–∞—á–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç
    col1, col2 = st.columns(2)
    
    with col1:
        # –ó“Ø—Ä—Ö–Ω–∏–π —Ü–æ—Ö–∏–ª—Ç—ã–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç
        fig_hr = go.Figure()
        fig_hr.add_trace(go.Scatter(
            x=record_df['final_position'],
            y=record_df['heart_rate_start'],
            mode='markers',
            name='–≠—Ö–ª—ç–ª–∏–π–Ω –ó—Ü',
            marker=dict(color='blue', size=8)
        ))
        fig_hr.add_trace(go.Scatter(
            x=record_df['final_position'],
            y=record_df['heart_rate_end'],
            mode='markers',
            name='–¢”©–≥—Å–≥”©–ª–∏–π–Ω –ó—Ü',
            marker=dict(color='red', size=8)
        ))
        fig_hr.update_layout(
            title="üíì –ë–∞–π—Ä–ª–∞–ª–∞–∞—Ä –ó“Ø—Ä—Ö–Ω–∏–π –¶–æ—Ö–∏–ª—Ç",
            xaxis_title="–≠—Ü—Å–∏–π–Ω –ë–∞–π—Ä–ª–∞–ª",
            yaxis_title="–ó“Ø—Ä—Ö–Ω–∏–π –¶–æ—Ö–∏–ª—Ç (–º–∏–Ω-–¥)"
        )
        st.plotly_chart(fig_hr, use_container_width=True)
    
    with col2:
        # –®–∞–≥–Ω–∞–ª—ã–Ω –º”©–Ω–≥”©–Ω–∏–π —Ç–∞—Ä—Ö–∞–ª—Ç
        fig_prize = px.bar(
            record_df.head(10),
            x='final_position',
            y='prize_money_tugrik',
            title="üí∞ –®–∞–≥–Ω–∞–ª—ã–Ω –ú”©–Ω–≥”© (–≠—Ö–Ω–∏–π 10)",
            labels={'final_position': '–ë–∞–π—Ä–ª–∞–ª', 'prize_money_tugrik': '–®–∞–≥–Ω–∞–ª—ã–Ω –ú”©–Ω–≥”© (‚ÇÆ)'},
            color='prize_money_tugrik',
            color_continuous_scale='Viridis'
        )
        st.plotly_chart(fig_prize, use_container_width=True)
    
    # –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —É—Ä–∞–ª–¥–∞–∞–Ω—ã “Ø—Ä –¥“Ø–Ω–≥–∏–π–Ω —Ö“Ø—Å–Ω—ç–≥—Ç
    st.markdown("### üìä –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –£—Ä–∞–ª–¥–∞–∞–Ω—ã “Æ—Ä –î“Ø–Ω")
    
    # –®“Ø“Ø–ª—Ç“Ø“Ø—Ä –Ω—ç–º—ç—Ö
    col1, col2, col3 = st.columns(3)
    with col1:
        position_filter = st.selectbox("–ë–∞–π—Ä–ª–∞–ª–∞–∞—Ä –®“Ø“Ø—Ö", 
                                     ["–ë“Ø–≥–¥", "–≠—Ö–Ω–∏–π 10", "–≠—Ö–Ω–∏–π 20", "–°“Ø“Ø–ª–∏–π–Ω 10"])
    with col2:
        speed_filter = st.slider("–•–∞–º–≥–∏–π–Ω –ë–∞–≥–∞–¥–∞–∞ –î—É–Ω–¥–∞–∂ –•—É—Ä–¥ (–∫–º/—Ü)", 
                               float(record_df['average_speed_kmh'].min()),
                               float(record_df['average_speed_kmh'].max()),
                               float(record_df['average_speed_kmh'].min()))
    with col3:
        weather_filter = st.selectbox("–¶–∞–≥ –ê–≥–∞–∞—Ä—ã–Ω –ù”©—Ö—Ü”©–ª", 
                                    ["–ë“Ø–≥–¥"] + list(record_df['weather'].unique()))
    
    # –®“Ø“Ø–ª—Ç“Ø“Ø—Ä —Ö—ç—Ä—ç–≥–ª—ç—Ö
    filtered_df = record_df.copy()
    
    if position_filter == "–≠—Ö–Ω–∏–π 10":
        filtered_df = filtered_df[filtered_df['final_position'] <= 10]
    elif position_filter == "–≠—Ö–Ω–∏–π 20":
        filtered_df = filtered_df[filtered_df['final_position'] <= 20]
    elif position_filter == "–°“Ø“Ø–ª–∏–π–Ω 10":
        filtered_df = filtered_df[filtered_df['final_position'] > 40]
    
    filtered_df = filtered_df[filtered_df['average_speed_kmh'] >= speed_filter]
    
    if weather_filter != "–ë“Ø–≥–¥":
        filtered_df = filtered_df[filtered_df['weather'] == weather_filter]
    
    # “Æ—Ä –¥“Ø–Ω–≥ —Ö–∞—Ä—É—É–ª–∞—Ö
    display_cols = ['final_position', 'horse_id', 'finish_time_minutes', 'finish_time_seconds', 
                   'average_speed_kmh', 'max_speed_kmh', 'prize_money_tugrik']
    
    st.dataframe(
        filtered_df[display_cols].style.format({
            'average_speed_kmh': '{:.2f}',
            'max_speed_kmh': '{:.2f}',
            'prize_money_tugrik': '‚ÇÆ{:,.0f}'
        }),
        use_container_width=True
    )

def live_race_simulation(live_df, record_df):
    """–®—É—É–¥ —É—Ä–∞–ª–¥–∞–∞–Ω—ã –¥“Ø—Ä—Å–ª—ç–ª - –∞–Ω–∏–º–∞—Ü–∏—Ç–∞–π"""
    
    st.markdown('<h2 class="sub-header">üì° –®—É—É–¥ –£—Ä–∞–ª–¥–∞–∞–Ω—ã –î“Ø—Ä—Å–ª—ç–ª - –®–∏–ª–¥—ç–≥ 5 –ú–æ—Ä—å</h2>', unsafe_allow_html=True)
    
    # –£–¥–∏—Ä–¥–ª–∞–≥—ã–Ω —Å–∞–º–±–∞—Ä
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚ñ∂Ô∏è –î“Ø—Ä—Å–ª—ç–ª –≠—Ö–ª“Ø“Ø–ª—ç—Ö", type="primary"):
            st.session_state.simulation_running = True
            st.session_state.current_timestamp = 0
    
    with col2:
        if st.button("‚è∏Ô∏è –ó–æ–≥—Å–æ–æ—Ö"):
            st.session_state.simulation_running = False
    
    with col3:
        if st.button("üîÑ –î–∞—Ö–∏–Ω –≠—Ö–ª—ç—Ö"):
            st.session_state.simulation_running = False
            st.session_state.current_timestamp = 0
    
    # Session state —ç—Ö–ª“Ø“Ø–ª—ç—Ö
    if 'simulation_running' not in st.session_state:
        st.session_state.simulation_running = False
    if 'current_timestamp' not in st.session_state:
        st.session_state.current_timestamp = 0
    
    # –¶–∞–≥–∏–π–Ω —Å–æ–Ω–≥–æ–ª—Ç
    max_time = live_df['timestamp_seconds'].max()
    current_time = st.slider(
        "–£—Ä–∞–ª–¥–∞–∞–Ω—ã –¶–∞–≥ (—Å–µ–∫—É–Ω–¥)", 
        0, int(max_time), 
        int(st.session_state.current_timestamp),
        step=60
    )
    
    # –û–¥–æ–æ–≥–∏–π–Ω ”©–≥”©–≥–¥”©–ª –∞–≤–∞—Ö
    current_data = live_df[live_df['timestamp_seconds'] == current_time]
    
    if len(current_data) > 0:
        # –£—Ä–∞–ª–¥–∞–∞–Ω—ã —è–≤—Ü
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # –ë–∞–π—Ä–ª–∞–ª—ã–Ω —Ö—è–Ω–∞–ª—Ç
            fig_pos = px.bar(
                current_data.sort_values('position'),
                x='horse_id',
                y='distance_covered_km',
                color='position',
                title=f"üèÅ –û–¥–æ–æ–≥–∏–π–Ω –ë–∞–π—Ä–ª–∞–ª (–¶–∞–≥: {current_time//60}:{current_time%60:02d})",
                labels={'distance_covered_km': '–¢—É—É–ª—Å–∞–Ω –ó–∞–π (–∫–º)'},
                color_continuous_scale='RdYlBu'
            )
            fig_pos.update_layout(showlegend=False)
            st.plotly_chart(fig_pos, use_container_width=True)
        
        with col2:
            st.markdown("### üìä –®—É—É–¥ “Æ–∑“Ø“Ø–ª—ç–ª—Ç")
            for _, horse in current_data.iterrows():
                with st.container():
                    st.markdown(f"**{horse['horse_id']}** (–ë–∞–π—Ä: {horse['position']})")
                    st.metric(
                        "–•—É—Ä–¥", 
                        f"{horse['current_speed_kmh']:.1f} –∫–º/—Ü",
                        delta=f"{horse['current_speed_kmh'] - 30:.1f}"
                    )
                    st.progress(horse['energy_level']/100)
                    st.markdown("---")
        
        # –•—É—Ä–¥ –±–æ–ª–æ–Ω –∑“Ø—Ä—Ö–Ω–∏–π —Ü–æ—Ö–∏–ª—Ç —Ü–∞–≥ —Ö—É–≥–∞—Ü–∞–∞–≥–∞–∞—Ä
        col1, col2 = st.columns(2)
        
        with col1:
            # –•—É—Ä–¥–Ω—ã —Ö—è–Ω–∞–ª—Ç
            time_data = live_df[live_df['timestamp_seconds'] <= current_time]
            fig_speed = px.line(
                time_data,
                x='timestamp_seconds',
                y='current_speed_kmh',
                color='horse_id',
                title="üöÄ –¶–∞–≥ –•—É–≥–∞—Ü–∞–∞–≥–∞–∞—Ä –•—É—Ä–¥",
                labels={'timestamp_seconds': '–¶–∞–≥ (—Å–µ–∫—É–Ω–¥)', 'current_speed_kmh': '–•—É—Ä–¥ (–∫–º/—Ü)'}
            )
            st.plotly_chart(fig_speed, use_container_width=True)
        
        with col2:
            # –ó“Ø—Ä—Ö–Ω–∏–π —Ü–æ—Ö–∏–ª—Ç—ã–Ω —Ö—è–Ω–∞–ª—Ç
            fig_hr = px.line(
                time_data,
                x='timestamp_seconds',
                y='heart_rate',
                color='horse_id',
                title="üíì –¶–∞–≥ –•—É–≥–∞—Ü–∞–∞–≥–∞–∞—Ä –ó“Ø—Ä—Ö–Ω–∏–π –¶–æ—Ö–∏–ª—Ç",
                labels={'timestamp_seconds': '–¶–∞–≥ (—Å–µ–∫—É–Ω–¥)', 'heart_rate': '–ó“Ø—Ä—Ö–Ω–∏–π –¶–æ—Ö–∏–ª—Ç (–º–∏–Ω-–¥)'}
            )
            st.plotly_chart(fig_hr, use_container_width=True)
        
        # –£—Ä–∞–ª–¥–∞–∞–Ω—ã –≥–∞–∑—Ä—ã–Ω –∑—É—Ä–∞–≥
        if 'latitude' in current_data.columns and 'longitude' in current_data.columns:
            st.markdown("### üó∫Ô∏è –®—É—É–¥ –£—Ä–∞–ª–¥–∞–∞–Ω—ã –ì–∞–∑—Ä—ã–Ω –ó—É—Ä–∞–≥")
            
            fig_map = px.scatter_mapbox(
                current_data,
                lat='latitude',
                lon='longitude',
                size='current_speed_kmh',
                color='position',
                hover_name='horse_id',
                hover_data=['current_speed_kmh', 'heart_rate', 'energy_level'],
                mapbox_style='open-street-map',
                zoom=10,
                title="–ó–∞–º–¥ –ú–æ—Ä—å–¥—ã–Ω –ë–∞–π—Ä–ª–∞–ª"
            )
            
            # –£—Ä–∞–ª–¥–∞–∞–Ω—ã –∑–∞–º—ã–Ω —à—É–≥–∞–º –Ω—ç–º—ç—Ö
            if len(time_data) > 0:
                for horse_id in time_data['horse_id'].unique():
                    horse_path = time_data[time_data['horse_id'] == horse_id]
                    fig_map.add_trace(go.Scattermapbox(
                        lat=horse_path['latitude'],
                        lon=horse_path['longitude'],
                        mode='lines',
                        name=f"{horse_id} –∑–∞–º",
                        line=dict(width=2),
                        showlegend=False
                    ))
            
            st.plotly_chart(fig_map, use_container_width=True)
        
        # –ê–≤—Ç–æ–º–∞—Ç –¥“Ø—Ä—Å–ª—ç–ª–∏–π–Ω “Ø—Ä–≥—ç–ª–∂–ª—ç–ª
        if st.session_state.simulation_running and current_time < max_time:
            time.sleep(2)
            st.session_state.current_timestamp = min(current_time + 60, max_time)
            st.rerun()
    
    else:
        st.warning("–°–æ–Ω–≥–æ—Å–æ–Ω —Ü–∞–≥—Ç ”©–≥”©–≥–¥”©–ª –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.")

def horse_trainer_profile(horses_df, trainers_df, record_df):
    """–ú–æ—Ä—å –±–∞ –°—É—Ä–≥–∞–≥—á–∏–π–Ω –•—É–≤–∏–π–Ω –ú—ç–¥—ç—ç–ª–ª–∏–π–Ω –°–∞–º–±–∞—Ä"""
    
    st.markdown('<h2 class="sub-header">üêé –ú–æ—Ä—å –±–∞ –£—è–∞—á–∏–π–Ω –•—É–≤–∏–π–Ω –ú—ç–¥—ç—ç–ª—ç–ª</h2>', unsafe_allow_html=True)
    
    profile_type = st.selectbox("–•—É–≤–∏–π–Ω –ú—ç–¥—ç—ç–ª–ª–∏–π–Ω –¢”©—Ä”©–ª", ["–ú–æ—Ä–∏–Ω—ã –•—É–≤–∏–π–Ω –ú—ç–¥—ç—ç–ª—ç–ª", "–£—è–∞—á–∏–π–Ω –•—É–≤–∏–π–Ω –ú—ç–¥—ç—ç–ª—ç–ª"])
    
    if profile_type == "–ú–æ—Ä–∏–Ω—ã –•—É–≤–∏–π–Ω –ú—ç–¥—ç—ç–ª—ç–ª":
        # –ú–æ—Ä—å —Å–æ–Ω–≥–æ—Ö
        horse_options = horses_df['horse_id'].tolist()
        selected_horse = st.selectbox("–ú–æ—Ä—å –°–æ–Ω–≥–æ—Ö", horse_options)
        
        if selected_horse:
            horse_info = horses_df[horses_df['horse_id'] == selected_horse].iloc[0]
            
            # –ú–æ—Ä–∏–Ω—ã –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(f"""
                <div class="race-card">
                <h3>üêé {selected_horse}</h3>
                <p><strong>–ù–∞—Å:</strong> {horse_info['age']} –∂–∏–ª</p>
                <p><strong>”®–Ω–≥”©:</strong> {horse_info['color']}</p>
                <p><strong>–£—Ä–∞–ª–¥–∞–∞–Ω—ã –ë“Ø–ª—ç–≥:</strong> {horse_info['racing_group']}</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="race-card">
                <h3>üìç –ë–∞–π—Ä—à–∏–ª</h3>
                <p><strong>–ê–π–º–∞–≥:</strong> {horse_info['aimag']}</p>
                <p><strong>–°—É–º:</strong> {horse_info['sum']}</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown(f"""
                <div class="race-card">
                <h3>üèÜ –ê–º–∂–∏–ª—Ç</h3>
                <p><strong>–ê–π–º–≥–∏–π–Ω:</strong> {horse_info['aimgiin_airag']}</p>
                <p><strong>“Æ–Ω–¥—ç—Å–Ω–∏–π:</strong> {horse_info['ulsiin_airag']}</p>
                <p><strong>–ù–∏–π—Ç:</strong> {horse_info['total_achievement']}</p>
                </div>
                """, unsafe_allow_html=True)
            
            # –£–Ω–∞–∞—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"""
                <div class="race-card">
                <h3>ü§† –£–Ω–∞–∞—á–∏–π–Ω –ú—ç–¥—ç—ç–ª—ç–ª</h3>
                <p><strong>–ù—ç—Ä:</strong> {horse_info['rider_name']}</p>
                <p><strong>–ù–∞—Å:</strong> {horse_info['rider_age']} –∂–∏–ª</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                # –°—É—Ä–≥–∞–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª
                trainer_info = trainers_df[trainers_df['trainer_id'] == horse_info['trainer_id']]
                if not trainer_info.empty:
                    trainer = trainer_info.iloc[0]
                    st.markdown(f"""
                    <div class="race-card">
                    <h3>üë®‚Äçüè´ –£—è–∞—á–∏–π–Ω –ú—ç–¥—ç—ç–ª—ç–ª</h3>
                    <p><strong>–ù—ç—Ä:</strong> {trainer['trainer_name']}</p>
                    <p><strong>–£—Ç–∞—Å:</strong> {trainer['phone_number']}</p>
                    <p><strong>–ù–∏–π—Ç –ú–æ—Ä—å:</strong> {trainer['total_trained_horses']}</p>
                    </div>
                    """, unsafe_allow_html=True)
            
            # –£—Ä–∞–ª–¥–∞–∞–Ω—ã –≥“Ø–π—Ü—ç—Ç–≥—ç–ª (–±–æ–ª–æ–º–∂—Ç–æ–π –±–æ–ª)
            race_performance = record_df[record_df['horse_id'] == selected_horse]
            if not race_performance.empty:
                st.markdown("### üèÅ –£—Ä–∞–ª–¥–∞–∞–Ω—ã –ì“Ø–π—Ü—ç—Ç–≥—ç–ª")
                perf = race_performance.iloc[0]
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("–≠—Ü—Å–∏–π–Ω –ë–∞–π—Ä–ª–∞–ª", f"#{perf['final_position']}")
                with col2:
                    st.metric("–î—É–Ω–¥–∞–∂ –•—É—Ä–¥", f"{perf['average_speed_kmh']:.2f} –∫–º/—Ü")
                with col3:
                    st.metric("–•–∞–º–≥–∏–π–Ω ”®–Ω–¥”©—Ä –•—É—Ä–¥", f"{perf['max_speed_kmh']:.2f} –∫–º/—Ü")
                with col4:
                    st.metric("–•–æ–∂—Å–æ–Ω –®–∞–≥–Ω–∞–ª", f"‚ÇÆ{perf['prize_money_tugrik']:,.0f}")
    
    else:  # –°—É—Ä–≥–∞–≥—á–∏–π–Ω –•—É–≤–∏–π–Ω –ú—ç–¥—ç—ç–ª—ç–ª
        trainer_options = trainers_df['trainer_name'].tolist()
        selected_trainer = st.selectbox("–£—è–∞—á –°–æ–Ω–≥–æ—Ö", trainer_options)
        
        if selected_trainer:
            trainer_info = trainers_df[trainers_df['trainer_name'] == selected_trainer].iloc[0]
            
            # –°—É—Ä–≥–∞–≥—á–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(f"""
                <div class="race-card">
                <h3>üë®‚Äçüè´ {selected_trainer}</h3>
                <p><strong>ID:</strong> {trainer_info['trainer_id']}</p>
                <p><strong>–£—Ç–∞—Å:</strong> {trainer_info['phone_number']}</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="race-card">
                <h3>üìç –ë–∞–π—Ä—à–∏–ª</h3>
                <p><strong>–ê–π–º–∞–≥:</strong> {trainer_info['aimag']}</p>
                <p><strong>–°—É–º:</strong> {trainer_info['sum']}</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown(f"""
                <div class="race-card">
                <h3>üèÜ –ê–º–∂–∏–ª—Ç</h3>
                <p><strong>“Æ–Ω–¥—ç—Å–Ω–∏–π:</strong> {trainer_info['national_achievement']}</p>
                <p><strong>–ê–π–º–≥–∏–π–Ω:</strong> {trainer_info['provincial__achievement']}</p>
                <p><strong>–ù–∏–π—Ç –ú–æ—Ä—å:</strong> {trainer_info['total_trained_horses']}</p>
                </div>
                """, unsafe_allow_html=True)
            
            # –°—É—Ä–≥–∞–≥—á–∏–π–Ω –º–æ—Ä—å–¥
            trainer_horses = horses_df[horses_df['trainer_id'] == trainer_info['trainer_id']]
            
            if not trainer_horses.empty:
                st.markdown("### üêé –°—É—Ä–≥–∞—Å–∞–Ω –ú–æ—Ä—å–¥")
                
                # –ú–æ—Ä–∏–Ω—ã –≥“Ø–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω —Ö—É—Ä–∞–∞–Ω–≥—É–π
                col1, col2 = st.columns(2)
                
                with col1:
                    # –°—É—Ä–≥–∞—Å–∞–Ω –º–æ—Ä—å–¥—ã–Ω –Ω–∞—Å–Ω—ã —Ç–∞—Ä—Ö–∞–ª—Ç
                    age_dist = trainer_horses['age'].value_counts().sort_index()
                    fig_age = px.bar(
                        x=age_dist.index,
                        y=age_dist.values,
                        title="–°—É—Ä–≥–∞—Å–∞–Ω –ú–æ—Ä—å–¥—ã–Ω –ù–∞—Å–Ω—ã –¢–∞—Ä—Ö–∞–ª—Ç",
                        labels={'x': '–ù–∞—Å (–ñ–∏–ª)', 'y': '–ú–æ—Ä–∏–Ω—ã –¢–æ–æ'}
                    )
                    st.plotly_chart(fig_age, use_container_width=True)
                
                with col2:
                    # –ê–º–∂–∏–ª—Ç—ã–Ω —Ç–∞—Ä—Ö–∞–ª—Ç
                    fig_achievements = px.scatter(
                        trainer_horses,
                        x='aimgiin_airag',
                        y='ulsiin_airag',
                        size='total_achievement',
                        color='age',
                        title="–ú–æ—Ä—å–¥—ã–Ω –ê–º–∂–∏–ª—Ç",
                        labels={'aimgiin_airag': '–ê–π–º–≥–∏–π–Ω –®–∞–≥–Ω–∞–ª', 'ulsiin_airag': '“Æ–Ω–¥—ç—Å–Ω–∏–π –®–∞–≥–Ω–∞–ª'},
                        hover_data=['horse_id']
                    )
                    st.plotly_chart(fig_achievements, use_container_width=True)
                
                # –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º–æ—Ä—å–¥—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç
                st.dataframe(
                    trainer_horses[['horse_id', 'age', 'color', 'racing_group', 'total_achievement']],
                    use_container_width=True
                )

def geospatial_dashboard(live_df, record_df):
    """–ì–∞–∑–∞—Ä–∑“Ø–π–Ω —É—Ä–∞–ª–¥–∞–∞–Ω—ã —à–∏–Ω–∂–∏–ª–≥—ç—ç–Ω–∏–π —Å–∞–º–±–∞—Ä"""
    
    st.markdown('<h2 class="sub-header">üó∫Ô∏è –ì–∞–∑–∞—Ä–∑“Ø–π–Ω –£—Ä–∞–ª–¥–∞–∞–Ω—ã –®–∏–Ω–∂–∏–ª–≥—ç—ç</h2>', unsafe_allow_html=True)
    
    if 'latitude' not in live_df.columns or 'longitude' not in live_df.columns:
        st.warning("–û–¥–æ–æ–≥–∏–π–Ω ”©–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ –≥–∞–∑–∞—Ä–∑“Ø–π–Ω ”©–≥”©–≥–¥”©–ª –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.")
        return
    
    # –ì–∞–∑—Ä—ã–Ω –∑—É—Ä–≥–∏–π–Ω —É–¥–∏—Ä–¥–ª–∞–≥–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        selected_horses = st.multiselect(
            "–•–∞—Ä—É—É–ª–∞—Ö –ú–æ—Ä—å–¥—ã–≥ –°–æ–Ω–≥–æ—Ö",
            live_df['horse_id'].unique(),
            default=live_df['horse_id'].unique()[:3]
        )
    
    with col2:
        map_style = st.selectbox(
            "–ì–∞–∑—Ä—ã–Ω –ó—É—Ä–≥–∏–π–Ω –ó–∞–≥–≤–∞—Ä",
            ["open-street-map", "satellite-raster", "stamen-terrain"]
        )
    
    with col3:
        show_elevation = st.checkbox("”®–Ω–¥—Ä–∏–π–Ω –ü—Ä–æ—Ñ–∞–π–ª –•–∞—Ä—É—É–ª–∞—Ö", value=True)
    
    if selected_horses:
        filtered_live = live_df[live_df['horse_id'].isin(selected_horses)]
        
        # “Æ–Ω–¥—Å—ç–Ω —É—Ä–∞–ª–¥–∞–∞–Ω—ã –∑–∞–º—ã–Ω –≥–∞–∑—Ä—ã–Ω –∑—É—Ä–∞–≥
        st.markdown("### üèÅ –ë“Ø—Ä—ç–Ω –£—Ä–∞–ª–¥–∞–∞–Ω—ã –ó–∞–º")
        
        fig_map = px.scatter_mapbox(
            filtered_live,
            lat='latitude',
            lon='longitude',
            color='horse_id',
            size='current_speed_kmh',
            hover_data=['timestamp_seconds', 'current_speed_kmh', 'heart_rate', 'position'],
            mapbox_style=map_style,
            zoom=10,
            height=600,
            title="–ú–æ—Ä—å–¥—ã–Ω –•”©–¥”©–ª–≥”©”©–Ω—Ç—ç–π –£—Ä–∞–ª–¥–∞–∞–Ω—ã –ó–∞–º"
        )
        
        # –£—Ä–∞–ª–¥–∞–∞–Ω—ã –∑–∞–º—ã–Ω —à—É–≥–∞–º –Ω—ç–º—ç—Ö
        for horse_id in selected_horses:
            horse_data = filtered_live[filtered_live['horse_id'] == horse_id].sort_values('timestamp_seconds')
            fig_map.add_trace(go.Scattermapbox(
                lat=horse_data['latitude'],
                lon=horse_data['longitude'],
                mode='lines',
                name=f"{horse_id} –∑–∞–º",
                line=dict(width=3),
                showlegend=True
            ))
        
        st.plotly_chart(fig_map, use_container_width=True)
        
        # –•—É—Ä–¥ –±–æ–ª–æ–Ω ”©–Ω–¥—Ä–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç
        if show_elevation:
            col1, col2 = st.columns(2)
            
            with col1:
                # –ú–æ—Ä—å —Ç—É—Å –±“Ø—Ä–∏–π–Ω —Ö—É—Ä–¥ –±–∞ —Ü–∞–≥
                fig_speed_time = px.line(
                    filtered_live,
                    x='timestamp_seconds',
                    y='current_speed_kmh',
                    color='horse_id',
                    title="–¶–∞–≥ –•—É–≥–∞—Ü–∞–∞–≥–∞–∞—Ä –•—É—Ä–¥",
                    labels={'timestamp_seconds': '–¶–∞–≥ (—Å–µ–∫—É–Ω–¥)', 'current_speed_kmh': '–•—É—Ä–¥ (–∫–º/—Ü)'}
                )
                st.plotly_chart(fig_speed_time, use_container_width=True)
            
            with col2:
                # ”®–Ω–¥—Ä–∏–π–Ω –ø—Ä–æ—Ñ–∞–π–ª
                fig_elevation = px.line(
                    filtered_live,
                    x='distance_covered_km',
                    y='elevation_m',
                    color='horse_id',
                    title="”®–Ω–¥—Ä–∏–π–Ω –ü—Ä–æ—Ñ–∞–π–ª",
                    labels={'distance_covered_km': '–ó–∞–π (–∫–º)', 'elevation_m': '”®–Ω–¥”©—Ä (–º)'}
                )
                st.plotly_chart(fig_elevation, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç
        st.markdown("### üìä –ì–∞–∑–∞—Ä–∑“Ø–π–Ω –°—Ç–∞—Ç–∏—Å—Ç–∏–∫")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–ù–∏–π—Ç –ó–∞–π", f"{filtered_live['distance_covered_km'].max():.1f} –∫–º")
        with col2:
            elevation_gain = filtered_live['elevation_m'].max() - filtered_live['elevation_m'].min()
            st.metric("”®–Ω–¥—Ä–∏–π–Ω ”®—Å”©–ª—Ç", f"{elevation_gain:.0f} –º")
        with col3:
            avg_speed = filtered_live['current_speed_kmh'].mean()
            st.metric("–î—É–Ω–¥–∞–∂ –•—É—Ä–¥", f"{avg_speed:.1f} –∫–º/—Ü")

# “Æ–Ω–¥—Å—ç–Ω –ø—Ä–æ–≥—Ä–∞–º
def main():
    # CSS –±–æ–ª–æ–Ω ”©–≥”©–≥–¥”©–ª –∞—á–∞–∞–ª–∞—Ö
    load_css()
    
    st.markdown('<h1 class="main-header">üèá –ù–∞–∞–¥–∞–º 2025 –£—Ä–∞–ª–¥–∞–∞–Ω—ã –°–∞–º–±–∞—Ä</h1>', unsafe_allow_html=True)
    
    # ”®–≥”©–≥–¥”©–ª –∞—á–∞–∞–ª–∞—Ö
    horses_df, trainers_df, record_df, live_df = load_data()
    
    # –•–∞–∂—É—É–≥–∏–π–Ω –Ω–∞–≤–∏–≥–∞—Ü–∏
    try:
        st.sidebar.image(r"data/logo.png", use_container_width=True)
    except:
        st.sidebar.markdown("## üèá –ù–∞–∞–¥–∞–º 2025")
    #st.sidebar.markdown("## üöÄ –ù–∞–≤–∏–≥–∞—Ü–∏")
    
    # –°–∞–º–±–∞—Ä—ã–Ω —Å–æ–Ω–≥–æ–ª—Ç
    dashboard = st.sidebar.selectbox(
        "–°–∞–º–±–∞—Ä –°–æ–Ω–≥–æ—Ö",
        ["üèá –ï—Ä”©–Ω—Ö–∏–π", "üèÅ –£—Ä–∞–ª–¥–∞–∞–Ω—ã —Ä—ç–∫–æ—Ä–¥", "üì° –®—É—É–¥ –î“Ø—Ä—Å–ª—ç–ª", "üë§ –•—É–≤–∏–π–Ω –ú—ç–¥—ç—ç–ª—ç–ª", "üó∫Ô∏è –ì–∞–∑–∞—Ä–∑“Ø–π–Ω"]
    )
    
    # –•–∞–∂—É—É–≥–∏–π–Ω ”©–≥”©–≥–¥–ª–∏–π–Ω —Ö—É—Ä–∞–∞–Ω–≥—É–π
    st.sidebar.markdown("## üìä ”®–≥”©–≥–¥–ª–∏–π–Ω –•—É—Ä–∞–∞–Ω–≥—É–π")
    st.sidebar.metric("–ù–∏–π—Ç –ú–æ—Ä—å", len(horses_df))
    st.sidebar.metric("–ù–∏–π—Ç –£—è–∞—á", len(trainers_df))
    st.sidebar.metric("–£—Ä–∞–ª–¥–∞–∞–Ω—ã –û—Ä–æ–ª—Ü–æ–≥—á", len(record_df))
    #st.sidebar.metric("–®—É—É–¥ ”®–≥”©–≥–¥–ª–∏–π–Ω –¶—ç–≥", len(live_df))
    
    # “Æ–Ω–¥—Å—ç–Ω —Å–∞–º–±–∞—Ä—ã–Ω –∞–≥—É—É–ª–≥–∞
    if dashboard == "üèá –ï—Ä”©–Ω—Ö–∏–π":
        overview_dashboard(horses_df, trainers_df, record_df)
    
    elif dashboard == "üèÅ –£—Ä–∞–ª–¥–∞–∞–Ω—ã –ë–∏—á–ª—ç–≥":
        race_record_dashboard(record_df, horses_df)
    
    elif dashboard == "üì° –®—É—É–¥ –î“Ø—Ä—Å–ª—ç–ª":
        live_race_simulation(live_df, record_df)
    
    elif dashboard == "üë§ –•—É–≤–∏–π–Ω –ú—ç–¥—ç—ç–ª—ç–ª":
        horse_trainer_profile(horses_df, trainers_df, record_df)
    
    elif dashboard == "üó∫Ô∏è –ì–∞–∑–∞—Ä–∑“Ø–π–Ω":
        geospatial_dashboard(live_df, record_df)
    
    # –î–æ–æ–¥ —Ç–∞–ª—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª
    st.sidebar.markdown("---")
    st.sidebar.markdown("**üèá –ù–∞–∞–¥–∞–º 2025 –°–∞–º–±–∞—Ä**")
    st.sidebar.markdown(f"–°“Ø“Ø–ª–¥ —à–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M')}")

if __name__ == "__main__":
    main()





